{"id":"../node_modules/loadware/loadware.js","dependencies":[{"name":"/Users/artemstanko/Documents/проект-37.js/package.json","includedInParent":true,"mtime":1739100563884},{"name":"/Users/artemstanko/Documents/проект-37.js/node_modules/loadware/package.json","includedInParent":true,"mtime":1738687178056},{"name":"app-module-path","loc":{"line":2,"column":8,"index":91},"parent":"/Users/artemstanko/Documents/проект-37.js/node_modules/loadware/loadware.js","resolved":"/Users/artemstanko/Documents/проект-37.js/node_modules/app-module-path/lib/index.js"},{"name":"path","loc":{"line":15,"column":20,"index":589},"parent":"/Users/artemstanko/Documents/проект-37.js/node_modules/loadware/loadware.js","resolved":"/Users/artemstanko/Documents/проект-37.js/node_modules/path-browserify/index.js"},{"name":"process","parent":"/Users/artemstanko/Documents/проект-37.js/node_modules/loadware/loadware.js","resolved":"/Users/artemstanko/Documents/проект-37.js/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n// loadware.js - Turn different middleware descriptors into an array of middleware\nrequire('app-module-path').addPath(process.cwd());\n\n// Put it all into a single array of non-arrays recursively\n// ['a', ['b', ['c', ...]]] => ['a', 'b', 'c', ...]\nlet flat = arr => arr.reduce((good, one) => {\n  let flatten = Array.isArray(one) ? flat(one) : one || [];\n  return good.concat(flatten)\n}, []);\n\n// Fetches the absolute path from the root\n// ['a', 'b'] => [require('a'), require('b')]\n// Note: this doesn't work: 'require(mid)'\nlet include = mid => typeof mid === 'string'\n  ? require(require('path').resolve(mid))\n  : mid;\n\n// Throw an error if there's something that is not a function anymore\n// [{ a: 'b' }] => throw new Error();\nlet others = mid => {\n  if (mid instanceof Function) return mid;\n  throw new Error(\"Only boolean, string, array or function can be middleware\");\n}\n\n// The actual glue for them all\nmodule.exports = (...middle) => flat(middle).map(include).filter(others);\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/loadware/loadware.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/loadware/loadware.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}}],"sources":{"../node_modules/loadware/loadware.js":"// loadware.js - Turn different middleware descriptors into an array of middleware\nrequire('app-module-path').addPath(process.cwd());\n\n// Put it all into a single array of non-arrays recursively\n// ['a', ['b', ['c', ...]]] => ['a', 'b', 'c', ...]\nlet flat = arr => arr.reduce((good, one) => {\n  let flatten = Array.isArray(one) ? flat(one) : one || [];\n  return good.concat(flatten)\n}, []);\n\n// Fetches the absolute path from the root\n// ['a', 'b'] => [require('a'), require('b')]\n// Note: this doesn't work: 'require(mid)'\nlet include = mid => typeof mid === 'string'\n  ? require(require('path').resolve(mid))\n  : mid;\n\n// Throw an error if there's something that is not a function anymore\n// [{ a: 'b' }] => throw new Error();\nlet others = mid => {\n  if (mid instanceof Function) return mid;\n  throw new Error(\"Only boolean, string, array or function can be middleware\");\n}\n\n// The actual glue for them all\nmodule.exports = (...middle) => flat(middle).map(include).filter(others);\n"},"lineCount":28}},"error":null,"hash":"07303f185c46a3158a733a36733fcf2e","cacheData":{"env":{}}}